#!/usr/bin/env python

import glob
import os
import sys
import subprocess
import tempfile
import argparse
import re
import mmap

from tempfile import mkstemp
from shutil import move
from os import remove, close

def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    with open(abs_path,'w') as new_file:
        with open(file_path) as old_file:
            for line in old_file:
                new_file.write(line.replace(pattern, subst))
    close(fh)
    #Remove original file
    remove(file_path)
    #Move new file
    move(abs_path, file_path)

versionLocations = {
    'gradle': {
        'regex': re.compile(r'courierVersion=(.*)'),
        'glob': '**/gradle.properties'
    },
    'sbt': {
        'regex': re.compile(r'version in ThisBuild := "(.*)"'),
        'glob': 'version.sbt'
    }
}

def __main__():
    parser = argparse.ArgumentParser(description='Bump version numbers.')
    parser.add_argument('version', nargs='?', help='new version')
    args = parser.parse_args()
    for (name, location) in versionLocations.items():
        for filename in glob.glob(location['glob']):
            with open(filename, 'r+') as file:
                data = mmap.mmap(file.fileno(), 0)
                version_match = re.search(location['regex'], data)
                if version_match:
                    current_version = version_match.group(1)
                    if args.version:
                        replace(filename, current_version, args.version)
                    else:
                        print "%s %s" % (filename, current_version)

__main__()
